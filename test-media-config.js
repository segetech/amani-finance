// Script de test pour v√©rifier la configuration des m√©dias
import dotenv from 'dotenv';
dotenv.config();

console.log('üîç V√©rification de la configuration des m√©dias...\n');

// Test UploadThing
console.log('üì∏ UploadThing Configuration:');
const uploadthingToken = process.env.UPLOADTHING_TOKEN;
if (uploadthingToken) {
  try {
    const decoded = JSON.parse(Buffer.from(uploadthingToken, 'base64').toString());
    console.log('‚úÖ Token UploadThing valide');
    console.log('   App ID:', decoded.appId);
    console.log('   R√©gions:', decoded.regions);
  } catch (error) {
    console.log('‚ùå Token UploadThing invalide:', error.message);
  }
} else {
  console.log('‚ùå UPLOADTHING_TOKEN manquant');
}

// Test Mux
console.log('\nüé• Mux Configuration:');
const muxTokenId = process.env.MUX_TOKEN_ID;
const muxTokenSecret = process.env.MUX_TOKEN_SECRET;

if (muxTokenId) {
  console.log('‚úÖ MUX_TOKEN_ID configur√©:', muxTokenId);
} else {
  console.log('‚ùå MUX_TOKEN_ID manquant');
}

if (muxTokenSecret && muxTokenSecret !== 'YOUR_MUX_TOKEN_SECRET') {
  console.log('‚úÖ MUX_TOKEN_SECRET configur√©');
} else {
  console.log('‚ùå MUX_TOKEN_SECRET manquant ou non configur√©');
}

// Test des URLs
console.log('\nüåê URLs de test:');
console.log('UploadThing API:', 'https://api.uploadthing.com');
console.log('Mux API:', 'https://api.mux.com');

console.log('\nüìã Prochaines √©tapes:');
if (!muxTokenSecret || muxTokenSecret === 'YOUR_MUX_TOKEN_SECRET') {
  console.log('1. Ajoutez votre MUX_TOKEN_SECRET dans le fichier .env');
}
console.log('2. Testez l\'upload d\'images avec UploadThing');
console.log('3. Testez l\'upload de vid√©os avec Mux');
console.log('4. Int√©grez les composants dans vos formulaires');

console.log('\nüöÄ Configuration termin√©e !');
