// Script de diagnostic pour le syst√®me de donn√©es √©conomiques
// Ex√©cuter avec: node scripts/diagnose-economic-data.js

import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL = process.env.VITE_SUPABASE_URL || 'https://rrhcctylbczzahgiqoub.supabase.co';
const SUPABASE_SERVICE_ROLE_KEY = process.env.VITE_SUPABASE_SERVICE_ROLE_KEY;
const SUPABASE_ANON_KEY = process.env.VITE_SUPABASE_ANON_KEY;

console.log('üîç Diagnostic du syst√®me de donn√©es √©conomiques\n');

// Test avec la cl√© service role
const supabaseAdmin = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);

// Test avec la cl√© anon (comme dans l'app)
const supabaseAnon = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

async function diagnoseSystem() {
  console.log('1. Test de connexion avec cl√© service role...');
  
  try {
    const { data: adminData, error: adminError } = await supabaseAdmin
      .from('economic_countries')
      .select('*')
      .limit(1);
      
    if (adminError) {
      console.error('‚ùå Erreur avec cl√© admin:', adminError);
    } else {
      console.log('‚úÖ Connexion admin r√©ussie, donn√©es trouv√©es:', adminData?.length || 0);
    }
  } catch (error) {
    console.error('‚ùå Erreur de connexion admin:', error);
  }

  console.log('\n2. Test de connexion avec cl√© anon...');
  
  try {
    const { data: anonData, error: anonError } = await supabaseAnon
      .from('economic_countries')
      .select('*')
      .limit(1);
      
    if (anonError) {
      console.error('‚ùå Erreur avec cl√© anon:', anonError);
    } else {
      console.log('‚úÖ Connexion anon r√©ussie, donn√©es trouv√©es:', anonData?.length || 0);
    }
  } catch (error) {
    console.error('‚ùå Erreur de connexion anon:', error);
  }

  console.log('\n3. Test de mise √† jour avec cl√© admin...');
  
  try {
    // D'abord, r√©cup√©rer un pays existant
    const { data: countries, error: fetchError } = await supabaseAdmin
      .from('economic_countries')
      .select('*')
      .limit(1);
      
    if (fetchError || !countries || countries.length === 0) {
      console.error('‚ùå Aucun pays trouv√© pour le test de mise √† jour');
      return;
    }
    
    const testCountry = countries[0];
    console.log('üìù Test de mise √† jour sur:', testCountry.name);
    
    // Tenter une mise √† jour simple
    const { data: updateData, error: updateError } = await supabaseAdmin
      .from('economic_countries')
      .update({ description: `Test mise √† jour ${new Date().toISOString()}` })
      .eq('id', testCountry.id)
      .select()
      .single();
      
    if (updateError) {
      console.error('‚ùå Erreur lors de la mise √† jour:', updateError);
    } else {
      console.log('‚úÖ Mise √† jour r√©ussie avec cl√© admin');
    }
  } catch (error) {
    console.error('‚ùå Erreur lors du test de mise √† jour:', error);
  }

  console.log('\n4. Test de mise √† jour avec cl√© anon...');
  
  try {
    const { data: countries, error: fetchError } = await supabaseAnon
      .from('economic_countries')
      .select('*')
      .limit(1);
      
    if (fetchError || !countries || countries.length === 0) {
      console.error('‚ùå Aucun pays trouv√© avec cl√© anon');
      return;
    }
    
    const testCountry = countries[0];
    
    const { data: updateData, error: updateError } = await supabaseAnon
      .from('economic_countries')
      .update({ description: `Test anon ${new Date().toISOString()}` })
      .eq('id', testCountry.id)
      .select()
      .single();
      
    if (updateError) {
      console.error('‚ùå Erreur lors de la mise √† jour avec cl√© anon:', updateError);
      console.log('üí° Ceci est probablement li√© aux permissions RLS');
    } else {
      console.log('‚úÖ Mise √† jour r√©ussie avec cl√© anon');
    }
  } catch (error) {
    console.error('‚ùå Erreur lors du test anon:', error);
  }

  console.log('\n5. V√©rification des politiques RLS...');
  
  try {
    const { data: policies, error: policiesError } = await supabaseAdmin
      .rpc('exec_sql', { 
        sql: `
          SELECT schemaname, tablename, policyname, permissive, roles, cmd, qual 
          FROM pg_policies 
          WHERE tablename IN ('economic_countries', 'regional_economic_metrics');
        `
      });
      
    if (policiesError) {
      console.error('‚ùå Erreur lors de la v√©rification des politiques:', policiesError);
    } else {
      console.log('üìã Politiques RLS trouv√©es:', policies?.length || 0);
      if (policies) {
        policies.forEach(policy => {
          console.log(`  - ${policy.tablename}.${policy.policyname}: ${policy.cmd} (${policy.permissive})`);
        });
      }
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification des politiques:', error);
  }

  console.log('\nüìä R√©sum√© du diagnostic:');
  console.log('- Si les tests admin passent mais pas les tests anon, c\'est un probl√®me de RLS');
  console.log('- Si aucun test ne passe, c\'est un probl√®me de migration/tables');
  console.log('- V√©rifiez les politiques RLS dans Supabase Dashboard > Authentication > Policies');
}

// Ex√©cuter le diagnostic
if (import.meta.url === `file://${process.argv[1]}`) {
  diagnoseSystem()
    .then(() => {
      console.log('\n‚úÖ Diagnostic termin√©');
      process.exit(0);
    })
    .catch(error => {
      console.error('‚ùå Erreur lors du diagnostic:', error);
      process.exit(1);
    });
}

export { diagnoseSystem };
