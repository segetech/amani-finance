// Test complet de la configuration
import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;
const uploadthingToken = process.env.UPLOADTHING_TOKEN;
const muxTokenId = process.env.MUX_TOKEN_ID;
const muxTokenSecret = process.env.MUX_TOKEN_SECRET;

console.log('üß™ Test complet de la configuration Amani Finance\n');

// Test 1: Variables d'environnement
console.log('1Ô∏è‚É£ Variables d\'environnement:');
console.log('   ‚úÖ Supabase URL:', supabaseUrl ? 'OK' : '‚ùå Manquant');
console.log('   ‚úÖ Supabase Key:', supabaseKey ? 'OK' : '‚ùå Manquant');
console.log('   ‚úÖ UploadThing Token:', uploadthingToken ? 'OK' : '‚ùå Manquant');
console.log('   ‚úÖ Mux Token ID:', muxTokenId ? 'OK' : '‚ùå Manquant');
console.log('   ‚úÖ Mux Token Secret:', muxTokenSecret ? 'OK' : '‚ùå Manquant');

if (!supabaseUrl || !supabaseKey) {
  console.error('\n‚ùå Configuration Supabase incompl√®te');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function runTests() {
  try {
    // Test 2: Connexion Supabase
    console.log('\n2Ô∏è‚É£ Test connexion Supabase:');
    const { data: pingData, error: pingError } = await supabase
      .from('content_categories')
      .select('count')
      .limit(1);
    
    if (pingError) {
      console.log('   ‚ùå Erreur connexion:', pingError.message);
    } else {
      console.log('   ‚úÖ Connexion Supabase OK');
    }

    // Test 3: Cat√©gories
    console.log('\n3Ô∏è‚É£ Test cat√©gories:');
    const { data: categories, error: catError } = await supabase
      .from('content_categories')
      .select('id, name, slug, is_active')
      .eq('is_active', true)
      .order('sort_order');

    if (catError) {
      console.log('   ‚ùå Erreur cat√©gories:', catError.message);
    } else {
      console.log(`   ‚úÖ ${categories?.length || 0} cat√©gories actives trouv√©es`);
      categories?.slice(0, 3).forEach(cat => {
        console.log(`      - ${cat.name} (${cat.slug})`);
      });
    }

    // Test 4: Contenus existants
    console.log('\n4Ô∏è‚É£ Test contenus:');
    const { data: contents, error: contentError } = await supabase
      .from('contents')
      .select('id, title, type, status')
      .limit(5);

    if (contentError) {
      console.log('   ‚ùå Erreur contenus:', contentError.message);
    } else {
      console.log(`   ‚úÖ ${contents?.length || 0} contenus trouv√©s`);
      contents?.forEach(content => {
        console.log(`      - ${content.title} (${content.type}, ${content.status})`);
      });
    }

    // Test 5: UploadThing
    console.log('\n5Ô∏è‚É£ Test UploadThing:');
    if (uploadthingToken) {
      try {
        const decoded = JSON.parse(Buffer.from(uploadthingToken, 'base64').toString());
        console.log('   ‚úÖ Token UploadThing valide');
        console.log(`      App ID: ${decoded.appId}`);
        console.log(`      R√©gions: ${decoded.regions.join(', ')}`);
      } catch (error) {
        console.log('   ‚ùå Token UploadThing invalide');
      }
    } else {
      console.log('   ‚ùå Token UploadThing manquant');
    }

    // Test 6: Mux
    console.log('\n6Ô∏è‚É£ Test Mux:');
    if (muxTokenId && muxTokenSecret && muxTokenSecret !== 'YOUR_MUX_TOKEN_SECRET') {
      console.log('   ‚úÖ Configuration Mux compl√®te');
      console.log(`      Token ID: ${muxTokenId}`);
    } else {
      console.log('   ‚ùå Configuration Mux incompl√®te');
    }

    // R√©sum√© final
    console.log('\nüìä R√©sum√©:');
    const checks = [
      supabaseUrl && supabaseKey,
      !pingError,
      !catError && categories && categories.length > 0,
      uploadthingToken,
      muxTokenId && muxTokenSecret && muxTokenSecret !== 'YOUR_MUX_TOKEN_SECRET'
    ];
    
    const passedChecks = checks.filter(Boolean).length;
    const totalChecks = checks.length;
    
    console.log(`   ${passedChecks}/${totalChecks} tests r√©ussis`);
    
    if (passedChecks === totalChecks) {
      console.log('   üéâ Configuration compl√®te et fonctionnelle !');
      console.log('\nüöÄ Prochaines √©tapes:');
      console.log('   1. Acc√©dez √† http://localhost:8080/test-media');
      console.log('   2. Testez l\'upload d\'images et vid√©os');
      console.log('   3. Acc√©dez √† http://localhost:8080/test-article-form');
      console.log('   4. V√©rifiez que les cat√©gories s\'affichent');
      console.log('   5. Cr√©ez votre premier article avec m√©dias !');
    } else {
      console.log('   ‚ö†Ô∏è Configuration incompl√®te');
      console.log('   V√©rifiez les √©l√©ments marqu√©s ‚ùå ci-dessus');
    }

  } catch (error) {
    console.error('\nüí• Erreur lors des tests:', error);
  }
}

runTests();
